# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fdm_msgs/GCodeCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GCodeCommand(genpy.Message):
  _md5sum = "a9792c73d889e17713210aba8d6352d6"
  _type = "fdm_msgs/GCodeCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# GCodeCommand.msg
int32 seq_id  # Unique ID to maintain execution order
int32 cmd_id  # Unique ID referencing the line-number in the original .gcode file
float64 x # Position in mm
float64 y # Position in mm
float64 z # Position in mm
float64 b # Orientation in rad
float64 f  # Speed of movement in mm/min
string printing_command  # Raw gCode like "M82"
bool has_movement  # True if there is a movement command
bool has_printing  # True if there is a printing command
bool is_final # True if it is the final command"""
  __slots__ = ['seq_id','cmd_id','x','y','z','b','f','printing_command','has_movement','has_printing','is_final']
  _slot_types = ['int32','int32','float64','float64','float64','float64','float64','string','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       seq_id,cmd_id,x,y,z,b,f,printing_command,has_movement,has_printing,is_final

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GCodeCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.seq_id is None:
        self.seq_id = 0
      if self.cmd_id is None:
        self.cmd_id = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.b is None:
        self.b = 0.
      if self.f is None:
        self.f = 0.
      if self.printing_command is None:
        self.printing_command = ''
      if self.has_movement is None:
        self.has_movement = False
      if self.has_printing is None:
        self.has_printing = False
      if self.is_final is None:
        self.is_final = False
    else:
      self.seq_id = 0
      self.cmd_id = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.b = 0.
      self.f = 0.
      self.printing_command = ''
      self.has_movement = False
      self.has_printing = False
      self.is_final = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i5d().pack(_x.seq_id, _x.cmd_id, _x.x, _x.y, _x.z, _x.b, _x.f))
      _x = self.printing_command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.has_movement, _x.has_printing, _x.is_final))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.seq_id, _x.cmd_id, _x.x, _x.y, _x.z, _x.b, _x.f,) = _get_struct_2i5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.printing_command = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.printing_command = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.has_movement, _x.has_printing, _x.is_final,) = _get_struct_3B().unpack(str[start:end])
      self.has_movement = bool(self.has_movement)
      self.has_printing = bool(self.has_printing)
      self.is_final = bool(self.is_final)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i5d().pack(_x.seq_id, _x.cmd_id, _x.x, _x.y, _x.z, _x.b, _x.f))
      _x = self.printing_command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.has_movement, _x.has_printing, _x.is_final))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.seq_id, _x.cmd_id, _x.x, _x.y, _x.z, _x.b, _x.f,) = _get_struct_2i5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.printing_command = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.printing_command = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.has_movement, _x.has_printing, _x.is_final,) = _get_struct_3B().unpack(str[start:end])
      self.has_movement = bool(self.has_movement)
      self.has_printing = bool(self.has_printing)
      self.is_final = bool(self.is_final)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i5d = None
def _get_struct_2i5d():
    global _struct_2i5d
    if _struct_2i5d is None:
        _struct_2i5d = struct.Struct("<2i5d")
    return _struct_2i5d
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
