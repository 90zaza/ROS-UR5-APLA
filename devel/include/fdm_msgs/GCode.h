// Generated by gencpp from file fdm_msgs/GCode.msg
// DO NOT EDIT!


#ifndef FDM_MSGS_MESSAGE_GCODE_H
#define FDM_MSGS_MESSAGE_GCODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fdm_msgs
{
template <class ContainerAllocator>
struct GCode_
{
  typedef GCode_<ContainerAllocator> Type;

  GCode_()
    : lines()  {
    }
  GCode_(const ContainerAllocator& _alloc)
    : lines(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _lines_type;
  _lines_type lines;





  typedef boost::shared_ptr< ::fdm_msgs::GCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fdm_msgs::GCode_<ContainerAllocator> const> ConstPtr;

}; // struct GCode_

typedef ::fdm_msgs::GCode_<std::allocator<void> > GCode;

typedef boost::shared_ptr< ::fdm_msgs::GCode > GCodePtr;
typedef boost::shared_ptr< ::fdm_msgs::GCode const> GCodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fdm_msgs::GCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fdm_msgs::GCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fdm_msgs::GCode_<ContainerAllocator1> & lhs, const ::fdm_msgs::GCode_<ContainerAllocator2> & rhs)
{
  return lhs.lines == rhs.lines;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fdm_msgs::GCode_<ContainerAllocator1> & lhs, const ::fdm_msgs::GCode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fdm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fdm_msgs::GCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fdm_msgs::GCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fdm_msgs::GCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fdm_msgs::GCode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fdm_msgs::GCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fdm_msgs::GCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fdm_msgs::GCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24da4e51d34c7073cb6bb805aa7f3bef";
  }

  static const char* value(const ::fdm_msgs::GCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24da4e51d34c7073ULL;
  static const uint64_t static_value2 = 0xcb6bb805aa7f3befULL;
};

template<class ContainerAllocator>
struct DataType< ::fdm_msgs::GCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fdm_msgs/GCode";
  }

  static const char* value(const ::fdm_msgs::GCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fdm_msgs::GCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# GCode.msg\n"
"string[] lines  # List of all gCode lines\n"
;
  }

  static const char* value(const ::fdm_msgs::GCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fdm_msgs::GCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fdm_msgs::GCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fdm_msgs::GCode_<ContainerAllocator>& v)
  {
    s << indent << "lines[]" << std::endl;
    for (size_t i = 0; i < v.lines.size(); ++i)
    {
      s << indent << "  lines[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.lines[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FDM_MSGS_MESSAGE_GCODE_H
